package project2.service;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.List;

import project2.domain.Article;
import project2.domain.Client;
import project2.domain.Order;

public class DatabaseManagerImpl implements DatabaseManager {
	
	
	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/shopdb";

	private String createTableClient = "CREATE TABLE Client(id int GENERATED BY DEFAULT AS IDENTITY UNIQUE, name varchar(50), surname varchar(50), email varchar(50))";
	private String createTableOrder = "CREATE TABLE Orders(id int GENERATED BY DEFAULT AS IDENTITY UNIQUE, client_id int, FOREIGN KEY(client_id) REFERENCES Client(id))";
	private String createTableArticle = "CREATE TABLE Article(id int GENERATED BY DEFAULT AS IDENTITY UNIQUE, name varchar(50), value decimal)";
	private String createTableOrderArticle = "CREATE TABLE OrderArticle(article_id int, order_id int, FOREIGN KEY(article_id) REFERENCES Article(id), FOREIGN KEY(order_id) REFERENCES Orders(id))";
	
	private PreparedStatement addClientStmt;
	private PreparedStatement addOrderStmt;
	private PreparedStatement addArticleStmt;
	private PreparedStatement updateClientStmt;
	private PreparedStatement updateOrderStmt;
	private PreparedStatement updateArticleStmt;
	private PreparedStatement deleteClientStmt;
	private PreparedStatement deleteOrderStmt;
	private PreparedStatement deleteArticleStmt;
	private PreparedStatement getClientStmt;
	private PreparedStatement getOrderStmt;
	private PreparedStatement getArticleStmt;
	private PreparedStatement deleteAllClientsStmt;
	private PreparedStatement deleteAllOrdersStmt;
	private PreparedStatement deleteAllArticlesStmt;
	private PreparedStatement getAllClientsStmt;
	private PreparedStatement getAllOrdersStmt;
	private PreparedStatement getAllArticlesStmt;
	
	private Statement statement;

	public DatabaseManagerImpl() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Client".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}			
			if (!tableExists) statement.executeUpdate(createTableClient);
			
			rs = connection.getMetaData().getTables(null, null, null, null);
			tableExists = false;
			while (rs.next()) {
				if ("Orders".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}			
			if (!tableExists) statement.executeUpdate(createTableOrder);
			
			rs = connection.getMetaData().getTables(null, null, null, null);
			tableExists = false;
			while (rs.next()) {
				if ("Article".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}			
			if (!tableExists) statement.executeUpdate(createTableArticle);
			
			rs = connection.getMetaData().getTables(null, null, null, null);
			tableExists = false;
			while (rs.next()) {
				if ("OrderArticle".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}			
			if (!tableExists) statement.executeUpdate(createTableOrderArticle);

			addClientStmt = connection
					.prepareStatement("INSERT INTO Client (name, surname, email) VALUES (?, ?, ?)");
//			addOrderStmt = connection
//					.prepareStatement("INSERT INTO Order (name, surname, email) VALUES (?, ?, ?)");
//			addClientStmt = connection
//					.prepareStatement("INSERT INTO Client (name, surname, email) VALUES (?, ?, ?)");
//			deleteShirtStmt = connection
//					.prepareStatement("DELETE FROM Shirt WHERE id=?");
//			updateShirtStmt = connection
//					.prepareStatement("UPDATE Shirt SET name=?, size=?, color=? WHERE id=?");
//			getShirtStmt = connection
//					.prepareStatement("SELECT id, name, size, color FROM Shirt WHERE id=?");
//			deleteAllShirtsStmt = connection
//					.prepareStatement("DELETE FROM Shirt");
//			getAllShirtsStmt = connection
//					.prepareStatement("SELECT id, name, size, color FROM Shirt");

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	

	public int addClient(Client client) {
		int count = 0;
		try {
			addClientStmt.setString(1, client.getName());
			addClientStmt.setString(2, client.getSurname());
			addClientStmt.setString(3, client.getEmail());

			count = addClientStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public int addOrder(Order order) {
		// TODO Auto-generated method stub
		return 0;
	}

	public int addArticle(Article article) {
		// TODO Auto-generated method stub
		return 0;
	}

	public Client getClient(int id) {
		// TODO Auto-generated method stub
		return null;
	}

	public Order getOrder(int id) {
		// TODO Auto-generated method stub
		return null;
	}

	public Article getArticle(int id) {
		// TODO Auto-generated method stub
		return null;
	}

	public int updateClient(Client client) {
		// TODO Auto-generated method stub
		return 0;
	}

	public int updateOrder(Order order) {
		// TODO Auto-generated method stub
		return 0;
	}

	public int updateArticle(Article article) {
		// TODO Auto-generated method stub
		return 0;
	}

	public int deleteClient(int id) {
		// TODO Auto-generated method stub
		return 0;
	}

	public int deleteOrder(int id) {
		// TODO Auto-generated method stub
		return 0;
	}

	public int deleteArticle(int id) {
		// TODO Auto-generated method stub
		return 0;
	}

	public List<Client> getAllClients() {
		// TODO Auto-generated method stub
		return null;
	}

	public List<Order> getAllOrders() {
		// TODO Auto-generated method stub
		return null;
	}

	public List<Article> getAllArticles() {
		// TODO Auto-generated method stub
		return null;
	}



	public void deleteAllClients() {
		// TODO Auto-generated method stub
		
	}



	public void deleteAllOrders() {
		// TODO Auto-generated method stub
		
	}



	public void deleteAllArticles() {
		// TODO Auto-generated method stub
		
	}

}
