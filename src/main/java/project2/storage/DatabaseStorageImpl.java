package project2.storage;

import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;

import project2.domain.Article;
import project2.domain.Client;
import project2.domain.Order;

public class DatabaseStorageImpl implements DatabaseStorage {
	
	
	private Connection connection;

	private String url = "jdbc:hsqldb:hsql://localhost/shopdb";

	private String createTableClient = "CREATE TABLE Client(id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name varchar(50), surname varchar(50), email varchar(50))";
	private String createTableOrder = "CREATE TABLE Orders(id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, client_id int, FOREIGN KEY(client_id) REFERENCES Client(id))";
	private String createTableArticle = "CREATE TABLE Article(id int GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, name varchar(50), value float)";
	private String createTableOrderArticle = "CREATE TABLE OrderArticle(article_id int, order_id int, FOREIGN KEY(article_id) REFERENCES Article(id), FOREIGN KEY(order_id) REFERENCES Orders(id))";

	
	private Statement statement;

	public DatabaseStorageImpl() {
		try {
			connection = DriverManager.getConnection(url);
			statement = connection.createStatement();

			ResultSet rs = connection.getMetaData().getTables(null, null, null, null);
			boolean tableExists = false;
			while (rs.next()) {
				if ("Client".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}			
			if (!tableExists) statement.executeUpdate(createTableClient);
			
			rs = connection.getMetaData().getTables(null, null, null, null);
			tableExists = false;
			while (rs.next()) {
				if ("Orders".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}			
			if (!tableExists) statement.executeUpdate(createTableOrder);
			
			rs = connection.getMetaData().getTables(null, null, null, null);
			tableExists = false;
			while (rs.next()) {
				if ("Article".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}			
			if (!tableExists) statement.executeUpdate(createTableArticle);
			
			rs = connection.getMetaData().getTables(null, null, null, null);
			tableExists = false;
			while (rs.next()) {
				if ("OrderArticle".equalsIgnoreCase(rs.getString("TABLE_NAME"))) {
					tableExists = true;
					break;
				}
			}			
			if (!tableExists) statement.executeUpdate(createTableOrderArticle);


		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
	
	

	public int addClient(Client client) {
		int count = 0;
		try {
			PreparedStatement addClientStmt = connection.prepareStatement("INSERT INTO Client (name, surname, email) VALUES (?, ?, ?)");
			addClientStmt.setString(1, client.getName());
			addClientStmt.setString(2, client.getSurname());
			addClientStmt.setString(3, client.getEmail());

			count = addClientStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public int addOrder(Order order) {
		int count = 0;
		try {
			PreparedStatement addOrderStmt = connection.prepareStatement("INSERT INTO Orders (client_id) VALUES (?)");
			addOrderStmt.setInt(1, order.getClient().getId());

			count = addOrderStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public int addArticle(Article article) {
		int count = 0;
		try {
			PreparedStatement addArticleStmt = connection.prepareStatement("INSERT INTO Article (name, value) VALUES (?, ?)");
			addArticleStmt.setString(1, article.getName());
			addArticleStmt.setDouble(2, article.getValue());

			count = addArticleStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}
	
	public int addArticleToOrder(Order order, Article article) {
		int count = 0;
		try {
			PreparedStatement addArticleToOrderStmt = connection.prepareStatement("INSERT INTO OrderArticle (order_id, article_id) VALUES (?, ?)");
			addArticleToOrderStmt.setInt(1, order.getId());
			addArticleToOrderStmt.setInt(2, article.getId());

			count = addArticleToOrderStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public Client getClient(int id) {
		
		Client client = new Client();
		
		try {
			PreparedStatement getClientStmt = connection.prepareStatement("SELECT id, name, surname, email FROM Client WHERE id=?");
			getClientStmt.setInt(1, id);
			ResultSet rs = getClientStmt.executeQuery();

			while(rs.next()) {
				client.setId(rs.getInt("id"));
				client.setName(rs.getString("name"));
				client.setSurname(rs.getString("surname"));
				client.setEmail(rs.getString("email"));
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return client;
	}

	public Order getOrder(int id) {
		
		Order order = new Order();
		
		try {
			PreparedStatement getOrderStmt = connection.prepareStatement("SELECT id, client_id FROM Orders WHERE id=?");
			getOrderStmt.setInt(1, id);
			ResultSet rs = getOrderStmt.executeQuery();

			while(rs.next()) {
				order.setId(rs.getInt("id"));
				order.setClient(getClient(rs.getInt("client_id")));
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return order;
	}

	public Article getArticle(int id) {
		
		Article article = new Article();
		
		try {
			PreparedStatement getArticleStmt = connection.prepareStatement("SELECT id, name, value FROM Article WHERE id=?");
			getArticleStmt.setInt(1, id);
			ResultSet rs = getArticleStmt.executeQuery();

			while(rs.next()) {
				article.setId(rs.getInt("id"));
				article.setName(rs.getString("name"));
				article.setValue(rs.getDouble("value"));
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		
		return article;
		
	}

	public int updateClient(Client client) {
		int count = 0;
		try {
			PreparedStatement updateClientStmt = connection.prepareStatement("UPDATE Client SET name=?, surname=?, email=? WHERE id=?");
			updateClientStmt.setString(1, client.getName());
			updateClientStmt.setString(2, client.getSurname());
			updateClientStmt.setString(3, client.getEmail());
			updateClientStmt.setInt(4, client.getId());

			count = updateClientStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public int updateOrder(Order order) {
		int count = 0;
		try {
			PreparedStatement updateOrderStmt = connection.prepareStatement("UPDATE Orders SET client_id=? WHERE id=?");
			updateOrderStmt.setInt(1, order.getClient().getId());
			updateOrderStmt.setInt(2, order.getId());

			count = updateOrderStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public int updateArticle(Article article) {
		int count = 0;
		try {
			PreparedStatement updateArticleStmt = connection.prepareStatement("UPDATE Article SET name=?, value=? WHERE id=?");
			updateArticleStmt.setString(1, article.getName());
			updateArticleStmt.setDouble(2, article.getValue());
			updateArticleStmt.setInt(3, article.getId());

			count = updateArticleStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public int deleteClient(int id) {
		int count = 0;
		try {
			PreparedStatement deleteClientStmt = connection.prepareStatement("DELETE FROM Client WHERE id=?");
			deleteClientStmt.setInt(1, id);
			count = deleteClientStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public int deleteOrder(int id) {
		int count = 0;
		try {
			PreparedStatement deleteOrderStmt = connection.prepareStatement("DELETE FROM Orders WHERE id=?");
			deleteOrderStmt.setInt(1, id);
			count = deleteOrderStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public int deleteArticle(int id) {
		int count = 0;
		try {
			PreparedStatement deleteArticleStmt = connection.prepareStatement("DELETE FROM Article WHERE id=?");
			deleteArticleStmt.setInt(1, id);
			count = deleteArticleStmt.executeUpdate();

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return count;
	}

	public List<Client> getAllClients() {
		
		List<Client> clients = new ArrayList<Client>();

		try {
			PreparedStatement getAllClientsStmt = connection.prepareStatement("SELECT id, name, surname, email FROM Client");
			ResultSet rs = getAllClientsStmt.executeQuery();

			while (rs.next()) {
				Client p = new Client();
				p.setId(rs.getInt("id"));
				p.setName(rs.getString("name"));
				p.setSurname(rs.getString("surname"));
				p.setEmail(rs.getString("email"));
				clients.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return clients;
	}

	public List<Order> getAllOrders() {
		
		List<Order> orders = new ArrayList<Order>();

		try {
			PreparedStatement getAllOrdersStmt = connection.prepareStatement("SELECT id, client_id FROM Orders");
			ResultSet rs = getAllOrdersStmt.executeQuery();

			while (rs.next()) {
				Order p = new Order();
				p.setId(rs.getInt("id"));
				p.setClient(getClient(rs.getInt("client_id")));
				orders.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return orders;
	}

	public List<Article> getAllArticles() {
		
		List<Article> articles = new ArrayList<Article>();

		try {
			PreparedStatement getAllArticlesStmt = connection.prepareStatement("SELECT id, name, value FROM Article");
			ResultSet rs = getAllArticlesStmt.executeQuery();

			while (rs.next()) {
				Article p = new Article();
				p.setId(rs.getInt("id"));
				p.setName(rs.getString("name"));
				p.setValue(rs.getDouble("value"));
				articles.add(p);
			}

		} catch (SQLException e) {
			e.printStackTrace();
		}
		return articles;
	}

	public void deleteAllClients() {
		
		try {
			PreparedStatement deleteAllClientsStmt = connection.prepareStatement("DELETE FROM Client");
			deleteAllClientsStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
	}
		

	public void deleteAllOrders() {
		
		try {
			PreparedStatement deleteAllOrdersStmt = connection.prepareStatement("DELETE FROM Orders");
			deleteAllOrdersStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}

	public void deleteAllArticles() {
		
		try {
			PreparedStatement deleteAllArticlesStmt = connection.prepareStatement("DELETE FROM Article");
			deleteAllArticlesStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}
	
	public void deleteAllOrderArticle() {
		
		try {
			PreparedStatement deleteAllOrderArticleStmt = connection.prepareStatement("DELETE FROM OrderArticle");
			deleteAllOrderArticleStmt.executeUpdate();
		} catch (SQLException e) {
			e.printStackTrace();
		}
		
	}





}
